openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /accounts/auth/login/:
    post:
      operationId: accounts_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /accounts/auth/logout/:
    post:
      operationId: accounts_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - accounts
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /accounts/auth/password/change/:
    post:
      operationId: accounts_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /accounts/auth/password/reset/:
    post:
      operationId: accounts_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /accounts/auth/password/reset/confirm/:
    post:
      operationId: accounts_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /accounts/auth/user/:
    get:
      operationId: accounts_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: accounts_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: accounts_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /accounts/change-password/:
    post:
      operationId: accounts_change_password_create
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /accounts/delete/:
    delete:
      operationId: accounts_delete_destroy
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /accounts/detail/{username}/:
    get:
      operationId: accounts_detail_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /accounts/edit/:
    put:
      operationId: accounts_edit_update
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /accounts/follow/{username}/:
    post:
      operationId: accounts_follow_create
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /accounts/signup/:
    post:
      operationId: accounts_signup_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /accounts/signup/resend-email/:
    post:
      operationId: accounts_signup_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /accounts/signup/verify-email/:
    post:
      operationId: accounts_signup_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /articles/:
    get:
      operationId: articles_retrieve
      tags:
      - articles
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: articles_create
      tags:
      - articles
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /articles/{article_pk}/:
    get:
      operationId: articles_retrieve_2
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: articles_update
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: articles_destroy
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /articles/{article_pk}/like/:
    post:
      operationId: articles_like_create
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /articles/comment/{article_pk}/{comment_pk}/delete/:
    delete:
      operationId: articles_comment_delete_destroy
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      - in: path
        name: comment_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /articles/comment/{article_pk}/{parent_pk}/:
    post:
      operationId: articles_comment_create
      parameters:
      - in: path
        name: article_pk
        schema:
          type: integer
        required: true
      - in: path
        name: parent_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /articles/comment/{comment_pk}/update/:
    put:
      operationId: articles_comment_update_update
      parameters:
      - in: path
        name: comment_pk
        schema:
          type: integer
        required: true
      tags:
      - articles
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /finlife/deposit-products/:
    get:
      operationId: finlife_deposit_products_retrieve
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: finlife_deposit_products_create
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /finlife/deposit-products/detail/{product_id}/:
    get:
      operationId: finlife_deposit_products_detail_retrieve
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /finlife/favorites/:
    get:
      operationId: finlife_favorites_retrieve
      tags:
      - finlife
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /finlife/favorites/deposit/{fin_prdt_cd}/:
    post:
      operationId: finlife_favorites_deposit_create
      parameters:
      - in: path
        name: fin_prdt_cd
        schema:
          type: string
        required: true
      tags:
      - finlife
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /finlife/favorites/saving/{fin_prdt_cd}/:
    post:
      operationId: finlife_favorites_saving_create
      parameters:
      - in: path
        name: fin_prdt_cd
        schema:
          type: string
        required: true
      tags:
      - finlife
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /finlife/save-deposit-products/:
    get:
      operationId: finlife_save_deposit_products_retrieve
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /finlife/save-saving-products/:
    get:
      operationId: finlife_save_saving_products_retrieve
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /finlife/saving-products/:
    get:
      operationId: finlife_saving_products_retrieve
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: finlife_saving_products_create
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /finlife/saving-products/detail/{product_id}/:
    get:
      operationId: finlife_saving_products_detail_retrieve
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - finlife
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /info/{fromCountry}/{price}/:
    get:
      operationId: info_retrieve
      parameters:
      - in: path
        name: fromCountry
        schema:
          type: string
        required: true
      - in: path
        name: price
        schema:
          type: integer
        required: true
      tags:
      - info
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /portfolios/:
    get:
      operationId: portfolios_retrieve
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: portfolios_create
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /portfolios/{portfolio_id}/:
    get:
      operationId: portfolios_retrieve_2
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: portfolios_update
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: portfolios_destroy
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /portfolios/{portfolio_id}/bonds/:
    post:
      operationId: portfolios_bonds_create
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /portfolios/{portfolio_id}/recommend/:
    get:
      operationId: portfolios_recommend_retrieve
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /portfolios/{portfolio_id}/stocks/:
    post:
      operationId: portfolios_stocks_create
      parameters:
      - in: path
        name: portfolio_id
        schema:
          type: integer
        required: true
      tags:
      - portfolios
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password1
      - password2
      - username
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
